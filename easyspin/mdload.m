%  mdload  Load data generated by molecular dynamics simulations.
%
%   MD = mdload(TrajFile, AtomInfo);
%
%   Input:
%     TrajFile       character array
%                    Name of trajectory output file.
%
%     AtomInfo       structure array containing the following fields
%
%                    TopFile    character array
%                               Name of topology input file used for 
%                               molecular dynamics simulations.
%
%                    ResName    character array
%                               Name of residue assigned to spin label side 
%                               chain, e.g. "CYR1" is the default used by 
%                               CHARMM-GUI.
%
%                    AtomNames  structure array
%                               Contains the atom names used in the PSF to 
%                               refer to the following atoms in the 
%                               nitroxide spin label molecule:
%
%                                   O (OName)
%                                   |
%                                   N (NName)
%                                  / \
%                        (C1Name) C   C (C2Name)
%
%     OutOpt         structure array containing the following fields
%
%                    Frame     1: (default) coordinate frame vector 
%                                 trajectories given as output
%                              0: coordinate frame atom trajectories given 
%                                 as output
%
%                    Verbosity 0: no display, 1: show info
%
%
%   Output:
%     MD             structure array containing the following fields:
%
%                    nSteps   integer
%                             total number of steps in trajectory
%
%                    dt       double
%                             size of time step (in s)
%
%                    if Frame = 0:
%                      Oxyz     numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for oxygen
% 
%                      Nxyz     numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for nitrogen
%  
%                      C1xyz    numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for carbon C1
%  
%                      C2xyz    numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for carbon C2
%
%                    if Frame = 1;
%                      FrameX   numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for X-axis
%                               vector
% 
%                      FrameY   numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for Y-axis
%                               vector
%  
%                      FrameZ   numeric, size = (nSteps,3)
%                               x,y,z coordinate trajectory for Z-axis
%                               vector
%
%
%   Supported formats are identified via the extension
%   in 'TrajFile' and 'TopFile'. Extensions:
%
%     NAMD, CHARMM:        .DCD, .PSF
%

function MD = mdload(TrajFile, AtomInfo, OutOpt)

switch nargin
  case 0
    help(mfilename); return;
  case 2 % TrajFile and AtomInfo specified, initialize Opt
    OutOpt = struct;
  case 3 % TrajFile, AtomInfo, and Opt provided
  otherwise
    error('Incorrect number of input arguments.')
end

if ~isfield(OutOpt,'Frame'), OutOpt.Frame = 1; end
if ~isfield(OutOpt,'Verbosity'), OutOpt.Verbosity = 0; end

% supported file types
supportedTrajFileExts = {'.DCD'};
supportedTopFileExts = {'.PSF'};

TopFile = AtomInfo.TopFile;
ResName = AtomInfo.ResName;
AtomNames = AtomInfo.AtomNames;

if ~ischar(TopFile)||regexp(TopFile,'\w+\.\w+','once')<1
  error('TopFile must be given as a character array, including the filename extension.')
end

% if numel(regexp(TopFile,'\.'))>1
%   error('Only one period (".") can be included in TopFile as part of the filename extension. Remove the others.')
% end

if exist(TopFile,'file')>0
  [TopFilePath, TopFileName, TopFileExt] = fileparts(TopFile);
  TopFile = fullfile(TopFilePath, [TopFileName, TopFileExt]);
else
  error('TopFile "%s" could not be found.', TopFile)
end

if ischar(TrajFile)
  % single trajectory file
  
  if exist(TrajFile,'file')>0
    % extract file extension and file path
    [TrajFilePath, TrajFileName, TrajFileExt] = fileparts(TrajFile);
    % add full file path to TrajFile
    TrajFile = fullfile(TrajFilePath, [TrajFileName, TrajFileExt]);
  else
    error('TrajFile "%s" could not be found.', TrajFile)
  end
  
  TrajFile = {TrajFile};
  TrajFilePath = {TrajFilePath};
  TrajFileExt = {TrajFileExt};
  nTrajFiles = 1;
elseif iscell(TrajFile)
  % multiple trajectory files
  if ~all(cellfun('isclass', TrajFile, 'char'))
    error('If TrajFile is a cell array, each element must be a character array.')
  end
  nTrajFiles = numel(TrajFile);
  TrajFilePath = cell(nTrajFiles,1);
  TrajFileName = cell(nTrajFiles,1);
  TrajFileExt = cell(nTrajFiles,1);
  for k=1:nTrajFiles
    if exist(TrajFile{k})>0
      [TrajFilePath{k}, TrajFileName{k}, TrajFileExt{k}] = fileparts(TrajFile{k});
      TrajFile{k} = fullfile(TrajFilePath{k}, [TrajFileName{k}, TrajFileExt{k}]);
    else
      error('TrajFile "%s" could not be found.', TrajFile{k})
    end
  end
  % make sure that all file extensions are identical
  if ~all(strcmp(TrajFileExt,TrajFileExt{1}))
    error('At least two of the TrajFile file extensions are not identical.')
  end
  if ~all(strcmp(TrajFilePath,TrajFilePath{1}))
    error('At least two of the TrajFilePath locations are not identical.')
  end
else
  error(['Please provide TrajFile as a single character array ',...
         '(single trajectory file) or a cell array whose elements are ',...
         'character arrays (multiple trajectory files).'])
end

TrajFileExt = upper(TrajFileExt{1});
TopFileExt = upper(TopFileExt);

% check if file extensions are supported

if ~any(strcmp(TrajFileExt,supportedTrajFileExts))
  error('The TrajFile extension "%s" is not supported.', TrajFileExt)
end

if ~any(strcmp(TopFileExt,supportedTopFileExts))
  error('The TopFile extension "%s" is not supported.', TopFileExt)
end

ExtCombo = [TrajFileExt, ',', TopFileExt];

if OutOpt.Verbosity==1, tic; end
for iTrajFile=1:nTrajFiles
  temp = processMD(TrajFile{iTrajFile}, TopFile, ResName, AtomNames, ExtCombo);
  if iTrajFile==1
    MD = temp;
  else
    % combine trajectories through array concatenation
    if MD.dt~=temp.dt
      error('Time steps of trajectory files are not equal.')
    end
    MD.nSteps = MD.nSteps + temp.nSteps;
    MD.Oxyz = cat(1, MD.Oxyz, temp.Oxyz);
    MD.Nxyz = cat(1, MD.Nxyz, temp.Nxyz);
    MD.C1xyz = cat(1, MD.C1xyz, temp.C1xyz);
    MD.C2xyz = cat(1, MD.C2xyz, temp.C2xyz);
  end
  % this could take a long time, so notify the user of progress
  if OutOpt.Verbosity==1
    updateuser(iTrajFile,nTrajFiles)
  end
end

if OutOpt.Frame==1
  % give the reference frame coordinate axis vector trajectories as output
  
  % N-O bond vector
  NO_vec = MD.Oxyz - MD.Nxyz;

  % N-C1 bond vector
  NC1_vec = MD.C1xyz - MD.Nxyz;

  % N-C2 bond vector
  NC2_vec = MD.C2xyz - MD.Nxyz;
  
  % Normalize vectors
  NO_vec = NO_vec./sqrt(sum(NO_vec.*NO_vec,2));
  NC1_vec = NC1_vec./sqrt(sum(NC1_vec.*NC1_vec,2));
  NC2_vec = NC2_vec./sqrt(sum(NC2_vec.*NC2_vec,2));

  vec1 = cross(NC1_vec, NO_vec, 2);
  vec2 = cross(NO_vec, NC2_vec, 2);

  MD.FrameZ = (vec1 + vec2)/2;
  MD.FrameZ = MD.FrameZ./sqrt(sum(MD.FrameZ.*MD.FrameZ,2));
  MD.FrameX = NO_vec;
  MD.FrameY = cross(MD.FrameZ, MD.FrameX, 2);
  
  MD = rmfield(MD, 'Oxyz');
  MD = rmfield(MD, 'Nxyz');
  MD = rmfield(MD, 'C1xyz');
  MD = rmfield(MD, 'C2xyz');
  
end

end

function Traj = processMD(TrajFile, TopFile, ResName, AtomNames, ExtCombo)
% 

switch ExtCombo
  case '.DCD,.PSF'
    % obtain atom indices of nitroxide coordinate atoms
    psf = readpsf(TopFile, ResName, AtomNames);  % TODO perform consistency checks between topology and trajectory files
    % load spin label trajectory
    Traj = readdcd(TrajFile, psf.idx_SpinLabel);
    % filter based on atom indices from psf file
    Traj.Oxyz = Traj.xyz(:,:,psf.idx_O==psf.idx_SpinLabel);
    Traj.Nxyz = Traj.xyz(:,:,psf.idx_N==psf.idx_SpinLabel);
    Traj.C1xyz = Traj.xyz(:,:,psf.idx_C1==psf.idx_SpinLabel);
    Traj.C2xyz = Traj.xyz(:,:,psf.idx_C2==psf.idx_SpinLabel);
    % we might not need the full spin label trajectory
    Traj = rmfield(Traj, 'xyz');
  otherwise
    error('TrajFile type "%s" and TopFile "%s" type combination is either ',...
          'not supported or not properly entered. Please see documentation.', TrajFileExt, TopFileExt)
end

end

function updateuser(iter,totN)
% Update user on progress

persistent reverseStr

if isempty(reverseStr), reverseStr = ''; end

avg_time = toc/iter;
secs_left = (totN - iter)*avg_time;
mins_left = floor(secs_left/60);

msg1 = sprintf('Iteration: %d/%d\n', iter, totN);
if avg_time<1.0
  msg2 = sprintf('%2.1f it/s\n', 1/avg_time);
else
  msg2 = sprintf('%2.1f s/it\n', avg_time);
end
msg3 = sprintf('Time left: %d:%2.0f\n', mins_left, mod(secs_left,60));
msg = [msg1, msg2, msg3];

fprintf([reverseStr, msg]);
reverseStr = repmat(sprintf('\b'), 1, length(msg));

end

% function status = FileExist(FileName)
% 
% 
% 
% end